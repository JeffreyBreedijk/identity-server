// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Utilize.Identity.Shared.DataSources;

namespace Utilize.Identity.Provider.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("UtilizeJwtProvider.Models.Licence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.PermissionScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("PermissionSchemes");

                    b.HasData(
                        new { Id = new Guid("59b9cba3-ca7e-421f-9500-08fe6adbdf7c"), IsActive = false, Name = "Default Permission Scheme" }
                    );
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("permissionSchemeId");

                    b.HasKey("Id");

                    b.HasIndex("permissionSchemeId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DebtorId");

                    b.Property<string>("Email");

                    b.Property<string>("Firstname");

                    b.Property<string>("Hash");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Lastname");

                    b.Property<string>("LoginCode");

                    b.Property<string>("Salt");

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.Permission", b =>
                {
                    b.HasOne("UtilizeJwtProvider.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.PermissionScheme", b =>
                {
                    b.HasOne("UtilizeJwtProvider.Models.Tenant", "Tenant")
                        .WithMany("PermissionSchemes")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.Role", b =>
                {
                    b.HasOne("UtilizeJwtProvider.Models.PermissionScheme", "permissionScheme")
                        .WithMany()
                        .HasForeignKey("permissionSchemeId");
                });

            modelBuilder.Entity("UtilizeJwtProvider.Models.User", b =>
                {
                    b.HasOne("UtilizeJwtProvider.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });
#pragma warning restore 612, 618
        }
    }
}
